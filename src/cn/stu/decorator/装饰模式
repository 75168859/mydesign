  ----->装饰模式
      ---->在不改变类型的基础上，动态扩展新的功能。
      ---->抽象的装饰器要能够提炼出来
           ---->继承本来产品的抽象
	   ---->并且让这个抽象作为自己的成员
	        通过构造函数初始化
      ---->在整个IO模型中
           所有字节流只要记住最原始的读和写
	   其它的都是通过装饰模式包装出来的。

	   字符流都是通过适配器模式适配而来
	   
	   
装饰模式（别名：包装器）
动态地给对象添加一些额外的职责。就功能来说装饰模式相比生成子类更为灵活。
	   
	   ---------
   装饰模式是动态地扩展一个对象的功能，而不需要改变原始类代码的一种成熟模式。
   在装饰模式中，“具体组件”类和“具体装饰”类是该模式中的最重要的两个角色。 
   
	   
	   
装饰模式的结构中包括四种角色：
 抽象组件（Component） 
 具体组件（ConcreteComponent） 
 装饰（Decorator） 
 具体装饰（ConcreteDecotator） 
  